// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Bought extends ethereum.Event {
  get params(): Bought__Params {
    return new Bought__Params(this);
  }
}

export class Bought__Params {
  _event: Bought;

  constructor(event: Bought) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get beans(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dollarBuy(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FeesMulChanged extends ethereum.Event {
  get params(): FeesMulChanged__Params {
    return new FeesMulChanged__Params(this);
  }
}

export class FeesMulChanged__Params {
  _event: FeesMulChanged;

  constructor(event: FeesMulChanged) {
    this._event = event;
  }

  get newBuyMul(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newSellMul(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MaxBagChanged extends ethereum.Event {
  get params(): MaxBagChanged__Params {
    return new MaxBagChanged__Params(this);
  }
}

export class MaxBagChanged__Params {
  _event: MaxBagChanged;

  constructor(event: MaxBagChanged) {
    this._event = event;
  }

  get newMaxBag(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Sold extends ethereum.Event {
  get params(): Sold__Params {
    return new Sold__Params(this);
  }
}

export class Sold__Params {
  _event: Sold;

  constructor(event: Sold) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get beans(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get dollarSell(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StablePairChanged extends ethereum.Event {
  get params(): StablePairChanged__Params {
    return new StablePairChanged__Params(this);
  }
}

export class StablePairChanged__Params {
  _event: StablePairChanged;

  constructor(event: StablePairChanged) {
    this._event = event;
  }

  get newStablePair(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newStableToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SRG20__candleStickDataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getTime(): BigInt {
    return this.value0;
  }

  getOpen(): BigInt {
    return this.value1;
  }

  getClose(): BigInt {
    return this.value2;
  }

  getHigh(): BigInt {
    return this.value3;
  }

  getLow(): BigInt {
    return this.value4;
  }
}

export class SRG20 extends ethereum.SmartContract {
  static bind(address: Address): SRG20 {
    return new SRG20("SRG20", address);
  }

  DIVISOR(): BigInt {
    let result = super.call("DIVISOR", "DIVISOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DIVISOR", "DIVISOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PADDING(): BigInt {
    let result = super.call("PADDING", "PADDING():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PADDING(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PADDING", "PADDING():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SHAREDIVISOR(): BigInt {
    let result = super.call("SHAREDIVISOR", "SHAREDIVISOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SHAREDIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("SHAREDIVISOR", "SHAREDIVISOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _balances(param0: Address): BigInt {
    let result = super.call("_balances", "_balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try__balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_balances", "_balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _buy(buyAmount: BigInt, minTokenOut: BigInt, deadline: BigInt): boolean {
    let result = super.call("_buy", "_buy(uint256,uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(buyAmount),
      ethereum.Value.fromUnsignedBigInt(minTokenOut),
      ethereum.Value.fromUnsignedBigInt(deadline)
    ]);

    return result[0].toBoolean();
  }

  try__buy(
    buyAmount: BigInt,
    minTokenOut: BigInt,
    deadline: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("_buy", "_buy(uint256,uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(buyAmount),
      ethereum.Value.fromUnsignedBigInt(minTokenOut),
      ethereum.Value.fromUnsignedBigInt(deadline)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _sell(tokenAmount: BigInt, deadline: BigInt, minBNBOut: BigInt): boolean {
    let result = super.call("_sell", "_sell(uint256,uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenAmount),
      ethereum.Value.fromUnsignedBigInt(deadline),
      ethereum.Value.fromUnsignedBigInt(minBNBOut)
    ]);

    return result[0].toBoolean();
  }

  try__sell(
    tokenAmount: BigInt,
    deadline: BigInt,
    minBNBOut: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_sell",
      "_sell(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenAmount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(minBNBOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _totalSupply(): BigInt {
    let result = super.call("_totalSupply", "_totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try__totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_totalSupply", "_totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(holder: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(holder), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    holder: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(holder), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approveMax(spender: Address): boolean {
    let result = super.call("approveMax", "approveMax(address):(bool)", [
      ethereum.Value.fromAddress(spender)
    ]);

    return result[0].toBoolean();
  }

  try_approveMax(spender: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("approveMax", "approveMax(address):(bool)", [
      ethereum.Value.fromAddress(spender)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyMul(): BigInt {
    let result = super.call("buyMul", "buyMul():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buyMul(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("buyMul", "buyMul():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculatePrice(): BigInt {
    let result = super.call("calculatePrice", "calculatePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_calculatePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculatePrice",
      "calculatePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  candleStickData(param0: BigInt): SRG20__candleStickDataResult {
    let result = super.call(
      "candleStickData",
      "candleStickData(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SRG20__candleStickDataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_candleStickData(
    param0: BigInt
  ): ethereum.CallResult<SRG20__candleStickDataResult> {
    let result = super.tryCall(
      "candleStickData",
      "candleStickData(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SRG20__candleStickDataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  charityShare(): BigInt {
    let result = super.call("charityShare", "charityShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_charityShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("charityShare", "charityShare():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  charityWallet(): Address {
    let result = super.call("charityWallet", "charityWallet():(address)", []);

    return result[0].toAddress();
  }

  try_charityWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "charityWallet",
      "charityWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkPendingRewards(holder: Address): BigInt {
    let result = super.call(
      "checkPendingRewards",
      "checkPendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(holder)]
    );

    return result[0].toBigInt();
  }

  try_checkPendingRewards(holder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "checkPendingRewards",
      "checkPendingRewards(address):(uint256)",
      [ethereum.Value.fromAddress(holder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  dividendDistributor(): Address {
    let result = super.call(
      "dividendDistributor",
      "dividendDistributor():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dividendDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dividendDistributor",
      "dividendDistributor():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCirculatingSupply(): BigInt {
    let result = super.call(
      "getCirculatingSupply",
      "getCirculatingSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCirculatingSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCirculatingSupply",
      "getCirculatingSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidity(): BigInt {
    let result = super.call("getLiquidity", "getLiquidity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getLiquidity", "getLiquidity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketCap(): BigInt {
    let result = super.call("getMarketCap", "getMarketCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMarketCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getMarketCap", "getMarketCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSRGPrice(): BigInt {
    let result = super.call("getSRGPrice", "getSRGPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getSRGPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getSRGPrice", "getSRGPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenAmountOut(amountSRGIn: BigInt): BigInt {
    let result = super.call(
      "getTokenAmountOut",
      "getTokenAmountOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amountSRGIn)]
    );

    return result[0].toBigInt();
  }

  try_getTokenAmountOut(amountSRGIn: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenAmountOut",
      "getTokenAmountOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amountSRGIn)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getValueOfHoldings(holder: Address): BigInt {
    let result = super.call(
      "getValueOfHoldings",
      "getValueOfHoldings(address):(uint256)",
      [ethereum.Value.fromAddress(holder)]
    );

    return result[0].toBigInt();
  }

  try_getValueOfHoldings(holder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getValueOfHoldings",
      "getValueOfHoldings(address):(uint256)",
      [ethereum.Value.fromAddress(holder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getsrgAmountOut(amountIn: BigInt): BigInt {
    let result = super.call(
      "getsrgAmountOut",
      "getsrgAmountOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amountIn)]
    );

    return result[0].toBigInt();
  }

  try_getsrgAmountOut(amountIn: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getsrgAmountOut",
      "getsrgAmountOut(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amountIn)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  indVol(param0: Address): BigInt {
    let result = super.call("indVol", "indVol(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_indVol(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("indVol", "indVol(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isDividendExempt(param0: Address): boolean {
    let result = super.call(
      "isDividendExempt",
      "isDividendExempt(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isDividendExempt(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isDividendExempt",
      "isDividendExempt(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFeeExempt(param0: Address): boolean {
    let result = super.call("isFeeExempt", "isFeeExempt(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isFeeExempt(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFeeExempt", "isFeeExempt(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSafe(): boolean {
    let result = super.call("isSafe", "isSafe():(bool)", []);

    return result[0].toBoolean();
  }

  try_isSafe(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSafe", "isSafe():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTxLimitExempt(param0: Address): boolean {
    let result = super.call(
      "isTxLimitExempt",
      "isTxLimitExempt(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isTxLimitExempt(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTxLimitExempt",
      "isTxLimitExempt(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liqConst(): BigInt {
    let result = super.call("liqConst", "liqConst():(uint256)", []);

    return result[0].toBigInt();
  }

  try_liqConst(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liqConst", "liqConst():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidity(): BigInt {
    let result = super.call("liquidity", "liquidity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_liquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liquidity", "liquidity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxBag(): BigInt {
    let result = super.call("maxBag", "maxBag():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxBag(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxBag", "maxBag():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxTX(): BigInt {
    let result = super.call("maxTX", "maxTX():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxTX(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxTX", "maxTX():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardShare(): BigInt {
    let result = super.call("rewardShare", "rewardShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardShare", "rewardShare():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellMul(): BigInt {
    let result = super.call("sellMul", "sellMul():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sellMul(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellMul", "sellMul():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tVol(param0: BigInt): BigInt {
    let result = super.call("tVol", "tVol(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_tVol(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tVol", "tVol(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  taxBalance(): BigInt {
    let result = super.call("taxBalance", "taxBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_taxBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("taxBalance", "taxBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  teamShare(): BigInt {
    let result = super.call("teamShare", "teamShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_teamShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("teamShare", "teamShare():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  teamWallet(): Address {
    let result = super.call("teamWallet", "teamWallet():(address)", []);

    return result[0].toAddress();
  }

  try_teamWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("teamWallet", "teamWallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalTx(): BigInt {
    let result = super.call("totalTx", "totalTx():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalTx(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalTx", "totalTx():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVolume(): BigInt {
    let result = super.call("totalVolume", "totalVolume():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalVolume(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalVolume", "totalVolume():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradeOpen(): boolean {
    let result = super.call("tradeOpen", "tradeOpen():(bool)", []);

    return result[0].toBoolean();
  }

  try_tradeOpen(): ethereum.CallResult<boolean> {
    let result = super.tryCall("tradeOpen", "tradeOpen():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  treasuryShare(): BigInt {
    let result = super.call("treasuryShare", "treasuryShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_treasuryShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "treasuryShare",
      "treasuryShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasuryWallet(): Address {
    let result = super.call("treasuryWallet", "treasuryWallet():(address)", []);

    return result[0].toAddress();
  }

  try_treasuryWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treasuryWallet",
      "treasuryWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  txTimeStamp(param0: BigInt): BigInt {
    let result = super.call("txTimeStamp", "txTimeStamp(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_txTimeStamp(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "txTimeStamp",
      "txTimeStamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _buyCall extends ethereum.Call {
  get inputs(): _buyCall__Inputs {
    return new _buyCall__Inputs(this);
  }

  get outputs(): _buyCall__Outputs {
    return new _buyCall__Outputs(this);
  }
}

export class _buyCall__Inputs {
  _call: _buyCall;

  constructor(call: _buyCall) {
    this._call = call;
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minTokenOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class _buyCall__Outputs {
  _call: _buyCall;

  constructor(call: _buyCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _sellCall extends ethereum.Call {
  get inputs(): _sellCall__Inputs {
    return new _sellCall__Inputs(this);
  }

  get outputs(): _sellCall__Outputs {
    return new _sellCall__Outputs(this);
  }
}

export class _sellCall__Inputs {
  _call: _sellCall;

  constructor(call: _sellCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get minBNBOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class _sellCall__Outputs {
  _call: _sellCall;

  constructor(call: _sellCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get amountSRGLiq(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveMaxCall extends ethereum.Call {
  get inputs(): ApproveMaxCall__Inputs {
    return new ApproveMaxCall__Inputs(this);
  }

  get outputs(): ApproveMaxCall__Outputs {
    return new ApproveMaxCall__Outputs(this);
  }
}

export class ApproveMaxCall__Inputs {
  _call: ApproveMaxCall;

  constructor(call: ApproveMaxCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveMaxCall__Outputs {
  _call: ApproveMaxCall;

  constructor(call: ApproveMaxCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ChangeDistributionCriteriaCall extends ethereum.Call {
  get inputs(): ChangeDistributionCriteriaCall__Inputs {
    return new ChangeDistributionCriteriaCall__Inputs(this);
  }

  get outputs(): ChangeDistributionCriteriaCall__Outputs {
    return new ChangeDistributionCriteriaCall__Outputs(this);
  }
}

export class ChangeDistributionCriteriaCall__Inputs {
  _call: ChangeDistributionCriteriaCall;

  constructor(call: ChangeDistributionCriteriaCall) {
    this._call = call;
  }

  get newinPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMinDistribution(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeDistributionCriteriaCall__Outputs {
  _call: ChangeDistributionCriteriaCall;

  constructor(call: ChangeDistributionCriteriaCall) {
    this._call = call;
  }
}

export class ChangeDistributorSettingsCall extends ethereum.Call {
  get inputs(): ChangeDistributorSettingsCall__Inputs {
    return new ChangeDistributorSettingsCall__Inputs(this);
  }

  get outputs(): ChangeDistributorSettingsCall__Outputs {
    return new ChangeDistributorSettingsCall__Outputs(this);
  }
}

export class ChangeDistributorSettingsCall__Inputs {
  _call: ChangeDistributorSettingsCall;

  constructor(call: ChangeDistributorSettingsCall) {
    this._call = call;
  }

  get gas(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeDistributorSettingsCall__Outputs {
  _call: ChangeDistributorSettingsCall;

  constructor(call: ChangeDistributorSettingsCall) {
    this._call = call;
  }
}

export class ChangeFeeReceiversCall extends ethereum.Call {
  get inputs(): ChangeFeeReceiversCall__Inputs {
    return new ChangeFeeReceiversCall__Inputs(this);
  }

  get outputs(): ChangeFeeReceiversCall__Outputs {
    return new ChangeFeeReceiversCall__Outputs(this);
  }
}

export class ChangeFeeReceiversCall__Inputs {
  _call: ChangeFeeReceiversCall;

  constructor(call: ChangeFeeReceiversCall) {
    this._call = call;
  }

  get newTeamWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newTreasuryWallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get newCharityWallet(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ChangeFeeReceiversCall__Outputs {
  _call: ChangeFeeReceiversCall;

  constructor(call: ChangeFeeReceiversCall) {
    this._call = call;
  }
}

export class ChangeFeesCall extends ethereum.Call {
  get inputs(): ChangeFeesCall__Inputs {
    return new ChangeFeesCall__Inputs(this);
  }

  get outputs(): ChangeFeesCall__Outputs {
    return new ChangeFeesCall__Outputs(this);
  }
}

export class ChangeFeesCall__Inputs {
  _call: ChangeFeesCall;

  constructor(call: ChangeFeesCall) {
    this._call = call;
  }

  get newBuyMul(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newSellMul(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeFeesCall__Outputs {
  _call: ChangeFeesCall;

  constructor(call: ChangeFeesCall) {
    this._call = call;
  }
}

export class ChangeIsDividendExemptCall extends ethereum.Call {
  get inputs(): ChangeIsDividendExemptCall__Inputs {
    return new ChangeIsDividendExemptCall__Inputs(this);
  }

  get outputs(): ChangeIsDividendExemptCall__Outputs {
    return new ChangeIsDividendExemptCall__Outputs(this);
  }
}

export class ChangeIsDividendExemptCall__Inputs {
  _call: ChangeIsDividendExemptCall;

  constructor(call: ChangeIsDividendExemptCall) {
    this._call = call;
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exempt(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangeIsDividendExemptCall__Outputs {
  _call: ChangeIsDividendExemptCall;

  constructor(call: ChangeIsDividendExemptCall) {
    this._call = call;
  }
}

export class ChangeIsFeeExemptCall extends ethereum.Call {
  get inputs(): ChangeIsFeeExemptCall__Inputs {
    return new ChangeIsFeeExemptCall__Inputs(this);
  }

  get outputs(): ChangeIsFeeExemptCall__Outputs {
    return new ChangeIsFeeExemptCall__Outputs(this);
  }
}

export class ChangeIsFeeExemptCall__Inputs {
  _call: ChangeIsFeeExemptCall;

  constructor(call: ChangeIsFeeExemptCall) {
    this._call = call;
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exempt(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangeIsFeeExemptCall__Outputs {
  _call: ChangeIsFeeExemptCall;

  constructor(call: ChangeIsFeeExemptCall) {
    this._call = call;
  }
}

export class ChangeIsTxLimitExemptCall extends ethereum.Call {
  get inputs(): ChangeIsTxLimitExemptCall__Inputs {
    return new ChangeIsTxLimitExemptCall__Inputs(this);
  }

  get outputs(): ChangeIsTxLimitExemptCall__Outputs {
    return new ChangeIsTxLimitExemptCall__Outputs(this);
  }
}

export class ChangeIsTxLimitExemptCall__Inputs {
  _call: ChangeIsTxLimitExemptCall;

  constructor(call: ChangeIsTxLimitExemptCall) {
    this._call = call;
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exempt(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangeIsTxLimitExemptCall__Outputs {
  _call: ChangeIsTxLimitExemptCall;

  constructor(call: ChangeIsTxLimitExemptCall) {
    this._call = call;
  }
}

export class ChangeTaxDistributionCall extends ethereum.Call {
  get inputs(): ChangeTaxDistributionCall__Inputs {
    return new ChangeTaxDistributionCall__Inputs(this);
  }

  get outputs(): ChangeTaxDistributionCall__Outputs {
    return new ChangeTaxDistributionCall__Outputs(this);
  }
}

export class ChangeTaxDistributionCall__Inputs {
  _call: ChangeTaxDistributionCall;

  constructor(call: ChangeTaxDistributionCall) {
    this._call = call;
  }

  get newteamShare(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newtreasuryShare(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get newRewardShare(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get newCharityShare(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ChangeTaxDistributionCall__Outputs {
  _call: ChangeTaxDistributionCall;

  constructor(call: ChangeTaxDistributionCall) {
    this._call = call;
  }
}

export class ChangeTxLimitsCall extends ethereum.Call {
  get inputs(): ChangeTxLimitsCall__Inputs {
    return new ChangeTxLimitsCall__Inputs(this);
  }

  get outputs(): ChangeTxLimitsCall__Outputs {
    return new ChangeTxLimitsCall__Outputs(this);
  }
}

export class ChangeTxLimitsCall__Inputs {
  _call: ChangeTxLimitsCall;

  constructor(call: ChangeTxLimitsCall) {
    this._call = call;
  }

  get newLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMaxTx(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeTxLimitsCall__Outputs {
  _call: ChangeTxLimitsCall;

  constructor(call: ChangeTxLimitsCall) {
    this._call = call;
  }
}

export class MakeSafeCall extends ethereum.Call {
  get inputs(): MakeSafeCall__Inputs {
    return new MakeSafeCall__Inputs(this);
  }

  get outputs(): MakeSafeCall__Outputs {
    return new MakeSafeCall__Outputs(this);
  }
}

export class MakeSafeCall__Inputs {
  _call: MakeSafeCall;

  constructor(call: MakeSafeCall) {
    this._call = call;
  }
}

export class MakeSafeCall__Outputs {
  _call: MakeSafeCall;

  constructor(call: MakeSafeCall) {
    this._call = call;
  }
}

export class OpenTradingCall extends ethereum.Call {
  get inputs(): OpenTradingCall__Inputs {
    return new OpenTradingCall__Inputs(this);
  }

  get outputs(): OpenTradingCall__Outputs {
    return new OpenTradingCall__Outputs(this);
  }
}

export class OpenTradingCall__Inputs {
  _call: OpenTradingCall;

  constructor(call: OpenTradingCall) {
    this._call = call;
  }
}

export class OpenTradingCall__Outputs {
  _call: OpenTradingCall;

  constructor(call: OpenTradingCall) {
    this._call = call;
  }
}

export class ProcessRewardsCall extends ethereum.Call {
  get inputs(): ProcessRewardsCall__Inputs {
    return new ProcessRewardsCall__Inputs(this);
  }

  get outputs(): ProcessRewardsCall__Outputs {
    return new ProcessRewardsCall__Outputs(this);
  }
}

export class ProcessRewardsCall__Inputs {
  _call: ProcessRewardsCall;

  constructor(call: ProcessRewardsCall) {
    this._call = call;
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProcessRewardsCall__Outputs {
  _call: ProcessRewardsCall;

  constructor(call: ProcessRewardsCall) {
    this._call = call;
  }
}

export class RedoMigrationCall extends ethereum.Call {
  get inputs(): RedoMigrationCall__Inputs {
    return new RedoMigrationCall__Inputs(this);
  }

  get outputs(): RedoMigrationCall__Outputs {
    return new RedoMigrationCall__Outputs(this);
  }
}

export class RedoMigrationCall__Inputs {
  _call: RedoMigrationCall;

  constructor(call: RedoMigrationCall) {
    this._call = call;
  }
}

export class RedoMigrationCall__Outputs {
  _call: RedoMigrationCall;

  constructor(call: RedoMigrationCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawTaxBalanceCall extends ethereum.Call {
  get inputs(): WithdrawTaxBalanceCall__Inputs {
    return new WithdrawTaxBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawTaxBalanceCall__Outputs {
    return new WithdrawTaxBalanceCall__Outputs(this);
  }
}

export class WithdrawTaxBalanceCall__Inputs {
  _call: WithdrawTaxBalanceCall;

  constructor(call: WithdrawTaxBalanceCall) {
    this._call = call;
  }
}

export class WithdrawTaxBalanceCall__Outputs {
  _call: WithdrawTaxBalanceCall;

  constructor(call: WithdrawTaxBalanceCall) {
    this._call = call;
  }
}
